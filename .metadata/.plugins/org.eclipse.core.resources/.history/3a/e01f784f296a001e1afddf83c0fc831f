/*
 * stack.c

 *
 *  Created on: Oct 13, 2023
 *      Author: Mohamed Saber
 */

#include "std_types.h"
#include "stack.h"
#include <stdio.h>



/**
 * @brief intialize the stack
 * @param stack_ptr pointer to the stack
 * @retval return the status of the initialization process
 */
ret_status stack_init(stack_type *mystack)
{

	ret_status ret;
	if(NULL==mystack)
	{
		ret=NOK;
	}
	else
	{
		ret=OK;
		mystack->stack_ptr=-1;

		printf("new stack is created\n");
	}

	return ret;
}



/**
 * @brief check stack is full,empty,utilized
 * @param stack_ptr pointer to the stack
 * @retval return the stack status
 */
static stack_status stack_status_func(stack_type *mystack)
{

	stack_status status;
	if(mystack->stack_ptr==-1)
	{
		status=EMPTY;
	}

	else if(mystack->stack_ptr==STACK_MAX_SIZE)
	{
		status=FULL;

	}

	else
	{
		status=UTILIZED;
	}

	return status;
}




ret_status stack_push(stack_type *mystack,uint32_t value)
{
	ret_status ret;
	if(NULL==mystack || FULL==stack_status_func)
	{
		ret=NOK;
	}
	else
	{
		ret=OK;

		(mystack->stack_ptr)++;

		mystack->stack_arr[mystack->stack_ptr]=value;
	}

	return ret;
}


ret_status stack_pop(stack_type *mystack,uint32_t *value);

ret_status stack_top(stack_type *mystack,uint32_t *value);

ret_status stack_size(stack_type *mystack,uint32_t *size);

ret_status stack_display(stack_type *mystack);
